----------------------------------------RHme-2015------------------------------------------------
Known Assets/Flags:
	- Admin Key
	- Privileged Key
	- User Key
	- Login as User (done)
	- Login as Privileged (done)
	- Login as Admin (done)
	- Dump the Binary (partially done?)
	- Gain Runtime Control
	- Affect the RNG (done)
-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
|					                       Guideline                    						|
-------------------------------------------------------------------------------------------------
1. Use Logic Analyzer and sniff Rx Pin => 1 bit every 1, 2 or 3 microseconds 
	=> Baudrate 1000000

2. Use PuTTY and connect to serial.
	After Reset:
--------------------------------------------------------
Calling eeprom_set_memory_protected
Welcome to Erucsir ICS terminal
Possible commands:
        A       authenticate
        Rxxxx   submit response (xxxx = response in hex)
        V       retrieve variables
        H       show help
--------------------------------------------------------

3. (Input) + (Enter) + (Ctrl-J) to send command.

4. Command: V
---------------------------------------------
How many variables should be printed? (max 5)
---------------------------------------------
	Print 5 Variables:
----------------------------------------------------------
Printing 5 variables
Terminal name                  Erucsir007
Accounts                       Enabled (2/2), Active (2/2)
Operational mode               Enabled
Debug mode                     Enabled
Physical location              Delft, Netherlands
Finished printing
----------------------------------------------------------
	What does these mean?
	Debug? Operational Mode? Only 2 Accounts, shouldn't be 3?

5. Command: A
=> Receive random Number(Nonce)
No TRNG Support => Entropy must be from some Pin

6. Try command "A" with all pins shorted to GND one by one => Pin A1 is used for RNG => same Nonce with A1 shorted to GND
Constant Nonce == 0xe7212f7d

7. Now What? Bruteforce? Voltage Glitch Attack? Command Fuzzing(maybe there are hidden commands)? Buffer Overflow?
Response is Rxxxxxxxx.
From GitHub we know that each user has unique masked response based on AES, the SW computes all of them and verify the response.
Type of Users: User, Privileged, Admin
All have one 128bit Key
---
Response is padded to 128 bits(=> P), then P is encrypted with AES-128 using the Key( => C), then C is masked with user Mask(M)
User Masks: Muser = 0x000FFFFF; Mpriv = 0x00FFFFFF; Madmin = 0xFFFFFFFF;
---
Example:
User Key = F0E0D0C0B0A090807060504030201000
Nonce = 0x0AEEB964 => P = 0AEEB964000000000000000000000000
C = AES(P, User Key) => R = C & Muser = 0x00033695 == R00033695
---
!! => Key and AES algorithm is irrelevant, because the response is limited to 4 bytes anyway !!
For User we must bruteforce value 0xFFFFF(== 1048575 DEC) => ~1 million tries
For Priv we must bruteforce value 0xFFFFFF(== 16777215 DEC) => ~17 milion tries (becomes not feasible)
For Admin we must bruteforce value 0xFFFFFFFF(== 4294967295 DEC) => ~4.5 billion tries (impossible)

Best to try Software Attacks and then Hardware Attacks to limit damage done to the Device.
	=> Brutforce normal User (done)
	=> Fuzz Commands
	=> Buffer Overflow
	=> Probably Voltage Glitch Attack for Privileged and Admin? Let's see after Software Attacks.

8. Bruteforce --> Create Python script to send commands on Serial COMM
Read the response, should be different than "E"(invalid response, probably comes from Error)
	It takes 3 seconds per Try => Max time = 873 hours == 36 full days ...
	It takes too much to get the response, manual with PuTTY it's faster! Why?
	Its because of the serial.readline() method, i avoided it by using read() and some additional checks.
	Now it computes 5 tries per second 
		=> Max time = 209715 s == 3495 minutes == 58 hours == 2.5 days
Note: Already Bruteforced : 0x00 -> 0x53A35
		"Authentication successful as user" => user password = R00063B4C == 0x63B4C

9. Explore User
"H" After login:
-------------------------------------
Authentication successful as user
Possible commands:
        R       read flash config
        P       print the valve state
        X       log out
        H       show help
-------------------------------------

"P" After Login:
-----------
Valve closed
------------
	what does this mean?

"R" After Login:
----------------------------------
Please insert your TOTP user token
----------------------------------
	If we type the same password of user(63b4c):
	------------------------------------------------
	Contacting TOTP validation server
	Token validated
	MCU family      ATMega328P
	Firmware        1.2.0-ALPHA
	Build date      01-10-2015
	Build flags     -O +x --eep rw --pgmem r --debug
	------------------------------------------------
	
	=> seems like the TOTP Token does not work, i got the same message with any token value	
	=> seems like its printing nothing if input is 33 characters => possible buffer overflow vulnerability?
	
10. Test unexpected inputs
Input requested from "V" command => input is a number smaller than 5
	-> letters result in "Input is not a valid number", so it's filtered properly.
	-> symbols result in "Input is not a valid number", so it's filtered properly.
	-> huge numbers result in "Input is not a valid number" as well
	-> negative number result in Memory Dump
		=> Improper conversion from int to unsigned
		=> "User authentication token      63b4c" => User Token is the same as password with shorted RNG pin
			However, another dumps resulted in no Token?
		=> "Getting closer!!" Easter egg in dumped data
		+ binwalk => nothing
Input requested from "R" command after User Login
	-> Already know input == 33 characters long result in no data
	-> negative number result in normal output
	-> symbol result in normal output
	-> input of 20 characters result in: truction length (min 0, max 4)
		=> some kind of overflow dump
		with input length of 21 it gives some gibberish
			+ binwalk => 83(0x53) AES S-Box? What is this?
		with input length > 21 doesn't print anything good?

11. Exploiting the User Overflow
After messing around with different lengths and values:
	-> Minimum payload length to perform the overflow == 20
	-> Byte 20(starting from 0) acts as some Offset
	-> Byte 21 acts as some form of random starting point for memory dump, still don't know what it does
	-> All other bytes affect somehow the dump/overflow
	-> Byte 20 and 21 must be <= 0x7F, else it will dump only same 2 bytes(0x0D 0x0A)
	-> Other bytes act as offsets if the value > 0x7F, however 2 of them can be any value with no visible impact in memory dump
	-> Filliong above byte 22 is useless, tried with 4000 bytes fill, no impact
	-> Offset Byte(Byte 20) is limited to 0x7F, and only change starting offset, ending address is always the same => can only make memory dump shorter => useless
	-> Only byte that seems to change starting address is the Byte 21 which has no obvious pattern
	-------------Payload Format(bytes numbers)--------------
	00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18
	19 20 21
	+ fill(optional and useless) + crlf
	--------------------------------------------------------

	=> Make script to use Byte 21 to dump all possible options
		-> Iterate from 0x00 to 0x7F and save each dump in a file

Program Flash: 0x0000 -> 0x3FFF
Internal SRAM: 0x0100-> 0x08FF
EEPROM: 0x0000 -> 0x08FF

TODO: rework dumper? likely not implemented properly and can be used better

12. Test Pins for outputs
	Readings from the Device mention Debug Enabled, maybe there is a hidden Serial Debug interface on some pins?
	=> Use Logic Analyzer on pins while using the Device
		=> Pin D8 was sending Data while when performing a memory dump.
		=> Frequency is 0.000989583 seconds per byte, or 989.583 us per byte
			-> Baudrate == 1010? 8104(8104.67)?
		=> Data: "0x66, 0x75, 0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x74, 0x6F, 0x74, 0x70, 0x5F, 0x76, 0x61, 0x6C, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x69, 0x6D, 0x70, 0x6C, 0x65, 0x6D, 0x65, 0x65, 0x6E, 0x74, 0x65, 0x64, 0x0D, 0x0A, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x69, 0x6E, 0x67, 0x20, 0x31, 0x0D, 0x0A"
		=> CyberChef it to : "function totp_validation not implemented \r\n returning 1\r\n" -> Already known that it's not working properly.
		=> What other things might this output?
			Seems like there are no other messages beside this.

13. Timing Attack
	Will do a timing attack on the Privileged and Admin Passwords.
	For this a logic analyzer will be used to measure all tries for each characters, the biggest delay shall correspond to the correct char in the password.
	Already done some measurements on known User Password to see the effects:
		----- User Password -----
		5 Wrong : 153.698167 (d = 0) / 153.698125(other measurement with different wrong chars)
		4 Wrong : 153.697625 (d = 542)
		3 Wrong : 153.696667 (d = 958)
		2 Wrong : 153.696750 (d = -83)
		1 Wrong : 153.696083 (d = 667)
		Correct : 201.449583 (d = not relevant)
		=> There is some big difference that should be enough to perform the timing attack on the password.
		In worst case, the timming can be done at byte level and then it should work better.
	Maybe a Python script to do the measurements as well?
		-> Measurement is done between 0D0A and 0x45 values on Rx Channel, need some kind of filtering.
			-> use python time to measure responses
			-> inconsistent timings and no significant differences?
				=> comparison is done starting with LSByte
					=> 0.200+ response time for 4C, 68 and D5; 4C confirmed from Bruteforce, other 2 must be for privileged and admin
	So attacking the time we get:
		-> ~201ms for 0x68 + ~255ms for 0x80 + ~300ms for 0x79 and logged in => Privileged User Password = R00798068 == 0x798068
		-> ~202ms for D5 + ~255ms for 0x51 + ~300ms for 0x84 + ~255ms for 0x49 and logged in => Admin User Password = R498451D5 == 0x498451D5
		
			
14. Explore Privileged User:
"H" after login:
------------------
Possible commands:
        R       read flash config
        P       print the valve state
        V       change the valve state
        S       send command to backend ICS network
        X       log out
        H       show help
------------------

"R" after login:
------------------
Please insert your TOTP user token
Contacting TOTP validation server
Token validated
MCU family      ATMega328P
Firmware        1.2.0-ALPHA
Build date      01-10-2015
Build flags     -O +x --eep rw --pgmem r --debug
------------------
	=> TODO: check debug pins and try to dump more memory, maybe there's something different.
		-> dumper works here too, seems to dump same memory
	
"P" after login:
------------------
Valve closed
------------------

"V" after login:
------------------
Valve changed
------------------
	=> TODO: Maybe some pin is now HIGH? check pins and debug serial.
	
"S" after login:
------------------
0x8c6
0x8cc
Insert instruction length (min 0, max 4)
------------------
	=> hmm? let's see
	with length 4:
	------------------
	Length 4
	Insert instruction opcode
	------------------
	Then with opcode 0000:
	------------------
	The inserted command was
	0000
	------------------

	Nothing else happen? Nothing seem chamged

	-> try length -1, nothing happens?
	-> TODO: Check Debug Serial, check other inputs

OP codes:
Read Program Flash: 0x28 0xMSB 0xLSB 0xHighDataByteOut
Read Program Flash: 0x20 0xMSB 0xLSB 0xLowDataByteOut
Read EEPROM: 0xA0 0xLSB 0xMSB 0xDataByteOut

=> TODO: Try to dump all memory with this?
	-> Iterate all addresses and execute both High and Low Data Read

15. Explore Admin
"H" after login:
------------------
Possible commands:
        R       read flash config
        P       print the valve state
        V       change the valve state
        S       send command to backend ICS network
        K       read the Admin key
        X       log out
        H       show help
------------------

"R" after login:
------------------
Please insert your TOTP user token
Contacting TOTP validation server
Token validated
MCU family      ATMega328P
Firmware        1.2.0-ALPHA
Build date      01-10-2015
Build flags     -O +x --eep rw --pgmem r --debug
------------------
	-> TODO: likely not working like other TOTP login, check for Debug Serial and Overflow Vulnerability

"P" after login:
------------------
Valve closed
------------------

"V" after login:
------------------
Valve changed
------------------
	-> TODO: Check pins for HIGH output
	
"S" after login:
------------------
0x8c6
0x8cc
Insert instruction length (min 0, max 4)
Length 4
Insert instruction opcode
The inserted command was
0123
------------------
	-> TODO: same as Priv User, try to break it, check Serial Port and fuzz inputs
	
"K" after login:
------------------
Retriving the Admin Key..........
Checking Key CRC..........
Shuffling bits..........
More shuffling..........
Even more shuffling!..........
Deshuffling bits..........
Error! Dizzy bit!..........
Applying Dimenhydrinate..........
The bit doesnt respond!..........
Any doctor in room?..........
Bit recovered.Printing..........
The key is..........
MUAHAHAAH!! TROLLED!
..........
------------------
	-> Funny enough
	-> TODO: Check Debug Serial and other pins
X. Fuzzing Inputs --> Create Python script to Fuzz Commands
	Seems like the Device is working with one letter commands. So Fuzz everything from a-z, A-Z, 0-100
	Script almost Done, fuzzing numbers remaining, trying to do it without use double code.

Y. Buffer Overflow --> Create Script to try and overflow the Inputs
	Targets: Command, Variables Number, Response, TOTP
	Script Done in theory, not tested yet.

Z. Voltage Glitch --> Create Python Script and Arduino project to glitch the Voltage
	Use MOSFET and other Arduino to control it.
	Arduino sketch done! --> Available in Basic-VoltageGlitch repository.
	TODO: Python script to control the glitcher and perform the attack.

